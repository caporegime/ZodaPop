# ZodaPop #

Version 0.0.1 Alpha

by Thane Vo

<vothane@gmail.com>

## Introduction ##

A brief summarization of what ZodaPop is:

> A basic PHP implementation of ActiveRececord, lighty sweetened with syntatic sugar, for the Zoho Reports cloud database API.
> Active Record is an implementation of the object-relational mapping (ORM) pattern by the same name described by Martin Fowler
> Active Record attempts to provide a coherent wrapper as a solution for the inconvenience that is object-relational mapping.
> A database table or view is wrapped into a class, thus an object instance is tied to a single row in the table. 
> After creation of an object, a new row is added to the table upon save. Any object loaded gets its information from the database; 
> when an object is updated, the corresponding row in the table is also updated. The wrapper class implements accessor methods or 
> properties for each column in the table.

Zoho Reports cloud database API can be found [here](http://zohoreportsapi.wiki.zoho.com/).
More details can be found [here](http://en.wikipedia.org/wiki/Active_record_pattern).

## Minimum Requirements ##

- PHP 5.3+
- Account with Zoho Reports with generated API key.
- All Tables must have a column named 'id' (primary key) and set to auto-number in Zoho dashboard.
- Tables columns names must not have spaces or funky characters
 
# Features ##

- OO CRUD operations
- Finder methods
- Dynamic finder methods
- Dynamic setter and getter methods

## Basic CRUD ##

### Retrieve ###
These are your basic methods to find and retrieve records from your database.

	// find a particular row by primary key 'id' in table
	// $activerecord_instance is an ZodaPop instance that contains the rows data if record is found
	$activerecord_instance = ZodaPop::find( array( "id" => '4540' ) );
	echo $activerecord_instance->subject;  // 'Some subject matter'
	echo $activerecord_instance->chapters; // 10

	# finding using dynamic finders
	$activerecord_instance = ZodaPop::find_by_subject('Beer');
	activerecord_instance = ZodaPop::find_authur('somebody');

### Create ###
Here we create a new post by instantiating a new object and then invoking the save() method.

	$activerecord_instance = new ZodaPop();
	$activerecord_instance->subject = 'new subject'
	$activerecord_instance->title = 'PHP Activerecord';
	$activerecord_instance->save();

### Update ###
To update you would just need to find a record first and then change one of its attributes.

	$activerecord_instance = Post::find_by_subject('Beer');
	echo $post->title; // 'Domestic Ales'
	$post->title = 'Imported Ales';
	$post->save();

	$post->title = 'New real title';
	$post->author_id = 1;
	$post->save();
	# UPDATE `posts` SET title='New real title', author_id=1 WHERE id=1

### Delete ###
Deleting a record will not *destroy* the object. This means that it will call sql to delete
the record in your database but you can still use the object if you need to.

	$post = Post::find(1);
	$post->delete();
	# DELETE FROM `posts` WHERE id=1
	echo $post->title; # 'New real title'

## TODOs ##

- Testing
- Major Refactoring 
- Relationships
- Validations
- Callbacks